#!/usr/bin/env python3

import argparse
import itertools
import math
import os
import pygit2
import signal

import gi
gi.require_version('Gtk', '3.0')
gi.require_version('Gdk', '3.0')
from gi.repository import Gdk, Gtk, GLib

class Revision:
	ZERO = pygit2.Oid(hex=pygit2.GIT_OID_HEX_ZERO)
	ABSENT, DIFFER, EQUAL = 0, 1, 2

	def __init__(self, commit, repo, deep, branch):
		self.commit = commit
		self.repo = repo
		self.id = commit.id
		self.file_id = self.ZERO
		self.state = self.ABSENT
		self.parent_ids = commit.parent_ids	# Порядок важен!
		self.deep = deep
		self.branch = branch

	def getBlobByTree(self, tree, item, tail):
		entry = next((e for e in tree if e.name == item), None)
		if not entry:
			return self.ZERO
		obj = self.repo.get_commit(entry.id)
		if obj.type == pygit2.GIT_OBJ_TREE:
			return self.getBlobByTree(obj, tail[0], tail[1:])
		assert obj.type == pygit2.GIT_OBJ_BLOB
		return obj.id

	def loadObject(self, path):
		parts = path.split(os.sep)
		self.file_id = self.getBlobByTree(self.commit.tree, parts[0], parts[1:])

	def getObject(self, path):
		# Todo: is not optimal. Potential multiple object search
		if self.file_id == self.ZERO:
			self.loadObject(path)
		if self.file_id == self.ZERO:
			return b''
		return self.repo.get_commit(self.file_id).data

	def addChild(self, id):
		self.child_ids.add(id)

	def label(self):
		return '%s:%s' % (str(self.id)[:7], str(self.file_id)[:7])


class Repository:
	MAX_BRANCHES = 500
	MAX_DEEP = 100

	def __init__(self, head):
		cwd = os.getcwd()
		repo_path = pygit2.discover_repository(cwd)
		self.repo = pygit2.Repository(repo_path)
		self.head_id = self.repo.revparse_single(head).id

		self.commits = dict()

	def get_workdir(self):
		return self.repo.workdir

	def head(self):
		return self.repo[self.head_id]

	def get_commit(self, id):
		return self.repo[id]

	def get_avail_branche(self, commits, id, deep):
		for b in range(self.MAX_BRANCHES):
			last = max((c for c in commits.values() if c.branch == b),
					key=lambda x: x.deep, default=None)
			if last is None:
				return b
			if last.deep >= deep:
				continue
			if all((p in commits for p in last.parent_ids if p != id)):
				return b
		return self.MAX_BRANCHES

	def load(self, app, path):
		app.set_status_text('Loading revisions...')
		app.set_status_progress(0)

		new_commits = dict()
		childrens = {self.head_id: []}
		for commit in self.repo.walk(self.head_id, pygit2.GIT_SORT_TOPOLOGICAL):
			child_ids = childrens.pop(commit.id)
			if all((cid in new_commits for cid in child_ids)):
				childs = [new_commits[cid] for cid in child_ids]
				deep = max((child.deep + 1 for child in childs), default=0)
				if deep < self.MAX_DEEP:
					branch = self.get_avail_branche(new_commits, commit.id, deep)
					new_commits[commit.id] = Revision(commit, self, deep, branch)

			for pn in commit.parent_ids:
				assert pn not in new_commits
				if pn in childrens:
					childrens[pn].append(commit.id)
				else:
					childrens[pn] = [commit.id]

			app.set_status_progress(None)
			yield True

		app.set_status_text('Load objects...')
		app.set_status_progress(0)
		ac_step = 1.0 / len(new_commits)
		ac_value = 0
		for c in new_commits.values():
			c.loadObject(path)
			ac_value += ac_step
			app.set_status_progress(ac_value)
			yield True

		self.commits = new_commits
		self.search_difference()
		self.select_first_parent(app)

		app.hide_status()
		app.redraw_revision_graph()

	def search_difference(self):
		right_file_id = self.commits[self.head_id].file_id
		for c in self.commits.values():
			if c.file_id == right_file_id:
				c.state = c.EQUAL
			elif c.file_id == c.ZERO:
				c.state = c.ABSENT
			else:
				c.state = c.DIFFER

	def select_first_parent(self, app):
		app.show_at_right(self.commits[self.head_id])
		right_file_id = self.commits[self.head_id].file_id
		id = self.head_id
		while True:
			nid = self.commits[id].parent_ids[0] if self.commits[id].parent_ids else None
			if nid is None or nid not in self.commits:
				app.show_at_left(self.commits[id])
				break
			if self.commits[nid].state != Revision.EQUAL:
				app.show_at_left(self.commits[nid])
				break
			id = nid

	def diff(self, aid, bid):
		if aid == Revision.ZERO or bid == Revision.ZERO:
			return []
		a = self.repo[aid]
		b = self.repo[bid]
		return a.diff(b).hunks


class Panel:
	DELETION, INSERTION = False, True

	def __init__(self, builder, textId, revId, authorId, messageId):
		self.textWidget = builder.get_object(textId)
		self.revWidget = builder.get_object(revId)
		self.authorWidget = builder.get_object(authorId)
		self.messageWidget = builder.get_object(messageId)
		self.deletion_tag = self.textWidget.get_buffer().create_tag('deletion', background_gdk=Gdk.Color(65535, 26214, 26214))
		self.insertion_tag = self.textWidget.get_buffer().create_tag('insertion', background_gdk=Gdk.Color(26214, 65535, 26214))

	def show(self, commit, text):
		self.textWidget.get_buffer().set_text(text)
		self.revWidget.get_buffer().set_text(str(commit.id))
		self.authorWidget.get_buffer().set_text('%s <%s>' % (commit.commit.author.name, commit.commit.author.email))
		self.messageWidget.get_buffer().set_text(commit.commit.message.splitlines()[0])

	def reset_colors(self):
		buffer = self.textWidget.get_buffer()
		begin = buffer.get_start_iter()
		end = buffer.get_end_iter()
		buffer.remove_all_tags(begin, end)

	def set_color(self, start, lines, insert):
		buffer = self.textWidget.get_buffer()
		begin = buffer.get_iter_at_line(start - 1)
		end = buffer.get_iter_at_line(start + lines - 1)
		buffer.apply_tag(self.insertion_tag if insert else self.deletion_tag, begin, end)

	def set_difference(self, diff, insert):
		buffer = self.textWidget.get_buffer()
		tag = self.insertion_tag if insert else self.deletion_tag
		for start, lines, total in diff:
			begin = buffer.get_iter_at_line(start - 1)
			end = buffer.get_iter_at_line(start - 1 + lines)
			buffer.apply_tag(tag, begin, end)


class ContentDiff:
	def __init__(self, hunks):
		self.hunks = list(self.drop_context(hunks))

	def drop_context(self, hunks):
		for h in hunks:
			old_start, old_lines, new_start, new_lines = None, None, None, None
			for l in h.lines:
				if l.origin == '-':
					if old_start is None:
						old_start = l.old_lineno
						old_lines = 0
					old_lines += 1
				elif l.origin == '+':
					if new_start is None:
						new_start = l.new_lineno
						new_lines = 0
					new_lines += 1
				else:
					if old_start is not None or new_start is not None:
						yield (old_start or l.old_lineno, old_lines or 0,
							new_start or l.new_lineno, new_lines or 0)
					old_start, old_lines, new_start, new_lines = None, None, None, None
			if old_start is not None or new_start is not None:
				yield (old_start or h.old_start + h.old_lines, old_lines or 0,
					new_start or h.new_start + h.new_lines, new_lines or 0)

	def get_left_diff(self):
		return [(h[0], h[1], max((h[1], h[3]))) for h in self.hunks]

	def get_right_diff(self):
		return [(h[2], h[3], max((h[1], h[3]))) for h in self.hunks]


class ContentComparator:
	def __init__(self, app, path):
		self.left_panel = Panel(app, 'leftText', 'leftRevisionText', 'leftAuthorText', 'leftCommitText')
		self.right_panel = Panel(app, 'rightText', 'rightRevisionText', 'rightAuthorText', 'rightCommitText')
		self.repo = app.repo
		self.path = path
		self.right_object_id = None
		self.left_object_id = None

	def show_at_right(self, commit):
		self.right_object_id = commit.file_id
		text = commit.getObject(self.path).decode('utf8')
		self.right_panel.show(commit, text)
		self.coloring()

	def show_at_left(self, commit):
		self.left_object_id = commit.file_id
		text = commit.getObject(self.path).decode('utf8')
		self.left_panel.show(commit, text)
		self.coloring()

	def coloring(self):
		self.left_panel.reset_colors()
		self.right_panel.reset_colors()
		if self.right_object_id is None or self.left_object_id is None:
			return
		diff = ContentDiff(self.repo.diff(self.left_object_id, self.right_object_id))
		self.left_panel.set_difference(diff.get_left_diff(), Panel.DELETION)
		self.right_panel.set_difference(diff.get_right_diff(), Panel.INSERTION)


class OldApplication:
	def __init__(self, repo, path):
		self.repo = repo

		self.builder = Gtk.Builder()
		self.builder.add_from_file(os.path.dirname(__file__) + '/gibli.glade')

		# Main window setup
		window = self.get_object('mainwindow')
		window.connect('delete-event', Gtk.main_quit)
		window.show_all()
		window.maximize()

		# Paned separator setup
		paned = self.get_object('paned1')
		height = paned.get_allocated_height()
		paned.set_position(height * 0.7)

		self.comparator = ContentComparator(self, path)
		self.comparator.show_at_right(Revision(repo.head(), repo, 0, 0))

		self.darea = self.get_object('revisionGraph')
		self.darea.connect('draw', self.draw_cb)
		self.darea.connect('button-press-event', self.on_graph_click)

		self.viewport = self.get_object('viewport1')
		hadj = self.viewport.get_hadjustment()
		vadj = self.viewport.get_vadjustment()
		self.hposition = hadj.get_page_size()
		self.vposition = 0
		hadj.connect('value_changed', self.on_hscroll)
		vadj.connect('value_changed', self.on_vscroll)

		self.progress = self.get_object('statusBar')
		self.progress.set_pulse_step(0.00001)

	def get_object(self, id):
		return self.builder.get_object(id)

	def set_status_text(self, text):
		self.progress.set_text(text)

	def set_status_progress(self, progress):
		if progress is None:
			self.progress.pulse()
		else:
			self.progress.set_fraction(progress)

	def hide_status(self):
		self.progress.hide()

	def show_status(self):
		self.progress.show()

	def redraw_revision_graph(self):
		self.darea.queue_draw()

	def on_hscroll(self, adj):
		self.hposition = adj.get_upper() - adj.get_value()

	def on_vscroll(self, adj):
		self.vposition = adj.get_value()

	def draw_cb(self, widget, context):
		try:
			deep = max((c.deep for c in self.repo.commits.values()))
			branch = max((c.branch for c in self.repo.commits.values()))
		except:
			# Не определили еще наполнение
			return False

		width = 63 + deep * 86 + 23
		height = 23 + branch * 30 + 23
		widget.set_size_request(width, height)

		for c in self.repo.commits.values():
			x = width - 23 - c.deep * 86
			y = 23 + c.branch * 30

			context.move_to(x, y - 8)
			context.set_source_rgb(0, 0, 0)
			context.arc(x, y, 8, math.pi * 1.5, math.pi * .5)
			context.line_to(x - 40, y + 8)
			context.arc(x - 40, y, 8, math.pi * .5, math.pi * 1.5)
			context.close_path()
			context.stroke_preserve()

			if c.state == c.ABSENT:
				context.set_source_rgb(0.7, 0.7, 0.7)	# Gray
			elif c.state == c.DIFFER:
				context.set_source_rgb(1, 0.4, 0.4)	# Red
			else:
				context.set_source_rgb(0.4, 1, 0.4)	# Green
			context.fill()

			context.move_to(x - 40, y + 4)
			context.set_source_rgb(0, 0, 0)
			context.show_text(str(c.id)[:7])

			for pid in c.parent_ids:
				if pid not in self.repo.commits:
					# History may be not complete
					context.move_to(x - 48, y)
					context.set_source_rgb(0, 0, 0)
					context.curve_to(x - 58, y, x - 58, y + 10, x - 68, y + 10)
					context.stroke()
					continue
				p = self.repo.commits[pid]
				px = width - 23 - p.deep * 86
				py = 23 + p.branch * 30

				context.move_to(px + 8, py)
				context.set_source_rgb(0, 0, 0)
				if p.branch > c.branch:
					context.line_to(x - 78, py)
					context.curve_to(x - 63, py, x - 63, y, x - 48, y)
				else:
					context.curve_to(px + 23, py, px + 23, y, px + 38, y)
				context.line_to(x - 48, y)
				context.stroke()

		hadj = self.viewport.get_hadjustment()
		hadj.set_value(hadj.get_upper() - self.hposition)
		vadj = self.viewport.get_vadjustment()
		vadj.set_value(self.vposition)
		return False

	def on_graph_click(self, widget, event):
		# event.x and event.y keep position in darea
		width, hewight = widget.get_size_request()
		deep = int((width - event.x) / 86)
		branch = int((event.y - 8) / 30)

		commit = next((c for c in self.repo.commits.values() if c.branch == branch and c.deep == deep), None)
		if commit is not None:
			self.comparator.show_at_left(commit)
		return True

	def show_at_left(self, commit):
		self.comparator.show_at_left(commit)

	def show_at_right(self, commit):
		self.comparator.show_at_right(commit)


class MainWindow(Gtk.Window):
	def __init__(self):
		super().__init__(self, type=Gtk.WindowType.TOPLEVEL, title='GIT blame interface')
		self.connect('delete-event', Gtk.main_quit)

		menu = Gtk.MenuBar()
		menu.append(Gtk.MenuItem('Help'))

		paned = Gtk.VPaned.new()
		paned.pack1(self.createDiffFrame(), True, True)
		paned.pack2(self.createGraphFrame(), True, True)
		paned.set_wide_handle(True)

		box = Gtk.HBox()
		box.pack_start(menu, False, False, 0)
		box.pack_end(paned, True, True, 0)
		self.add(box)

	def createDiffFrame(self):
		lefttext = Gtk.TextView.new()
		leftscroll = Gtk.ScrolledWindow.new()
		leftscroll.set_policy(Gtk.PolicyType.AUTOMATIC, Gtk.PolicyType.NEVER)
		leftscroll.add(lefttext)

		righttext = Gtk.TextView.new()
		rightscroll = Gtk.ScrolledWindow.new()
		rightscroll.set_policy(Gtk.PolicyType.AUTOMATIC, Gtk.PolicyType.NEVER)
		rightscroll.add(righttext)

		diffbox = Gtk.HBox.new(False, 0)
		diffbox.pack_start(leftscroll, True, True, 0)
		diffbox.pack_end(rightscroll, True, True, 0)

		viewport = Gtk.Viewport.new()
		viewport.add(diffbox)

		diff = Gtk.ScrolledWindow.new()
		diff.set_policy(Gtk.PolicyType.NEVER, Gtk.PolicyType.AUTOMATIC)
		diff.add(viewport)

		info = Gtk.Table.new(4, 3, True)
		info.attach(Gtk.Label.new("Revision:"), 0, 1, 0, 1, xoptions=Gtk.AttachOptions.SHRINK)
		info.attach(Gtk.Label.new("Author:"), 0, 1, 1, 2, xoptions=Gtk.AttachOptions.SHRINK)
		info.attach(Gtk.Label.new("Commit:"), 0, 1, 2, 3, xoptions=Gtk.AttachOptions.SHRINK)

		info.attach(Gtk.TextView.new(), 1, 2, 0, 1, xoptions=Gtk.AttachOptions.FILL | Gtk.AttachOptions.EXPAND)
		info.attach(Gtk.TextView.new(), 1, 2, 1, 2, xoptions=Gtk.AttachOptions.FILL | Gtk.AttachOptions.EXPAND)
		info.attach(Gtk.TextView.new(), 1, 2, 2, 3, xoptions=Gtk.AttachOptions.FILL | Gtk.AttachOptions.EXPAND)

		info.attach(Gtk.Label.new("Revision:"), 2, 3, 0, 1, xoptions=Gtk.AttachOptions.SHRINK)
		info.attach(Gtk.Label.new("Author:"), 2, 3, 1, 2, xoptions=Gtk.AttachOptions.SHRINK)
		info.attach(Gtk.Label.new("Commit:"), 2, 3, 2, 3, xoptions=Gtk.AttachOptions.SHRINK)

		info.attach(Gtk.TextView.new(), 3, 4, 0, 1, xoptions=Gtk.AttachOptions.FILL | Gtk.AttachOptions.EXPAND)
		info.attach(Gtk.TextView.new(), 3, 4, 1, 2, xoptions=Gtk.AttachOptions.FILL | Gtk.AttachOptions.EXPAND)
		info.attach(Gtk.TextView.new(), 3, 4, 2, 3, xoptions=Gtk.AttachOptions.FILL | Gtk.AttachOptions.EXPAND)

		box = Gtk.VBox()
		box.pack_start(diff, True, True, 0)
		box.pack_end(info, False, False, 0)

		return box

	def createGraphFrame(self):
		draw = Gtk.DrawingArea.new()

		viewport = Gtk.Viewport.new()
		viewport.add(draw)

		graph = Gtk.ScrolledWindow.new()
		graph.add(viewport)

		status = Gtk.ProgressBar.new()

		box = Gtk.VBox()
		box.pack_start(graph, True, True, 0)
		box.pack_end(status, False, False, 0)

		return box


class Application:
	def __init__(self):
		parser = argparse.ArgumentParser(description='GIT blame interface')
		parser.add_argument('revision', type=str, nargs='?', help='revision', default='HEAD')
		parser.add_argument('filename', type=str, nargs=1, help='filename to analisys')
		args = parser.parse_args()

		self.repo = Repository(args.revision)
		self.path = os.path.relpath(args.filename[0], self.repo.get_workdir())

		self.main_window = MainWindow()

	def main(self):
		self.main_window.maximize()
		self.main_window.show_all()
		app = OldApplication(self.repo, self.path)

		loading = self.repo.load(app, self.path)
		GLib.idle_add(lambda: next(loading, False), priority=GLib.PRIORITY_LOW)

		Gtk.main()


if __name__ == '__main__':
	signal.signal(signal.SIGINT, signal.SIG_DFL)
	app = Application()
	app.main()

