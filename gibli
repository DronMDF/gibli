#!/usr/bin/env python3

import os
from pygit2 import discover_repository, Oid, Repository, GIT_OBJ_TREE, GIT_OBJ_BLOB, GIT_OID_HEX_ZERO

cwd = os.getcwd()
repo_path = discover_repository(cwd)
repo = Repository(repo_path)

path = 'arch/x86/Makefile'

def getBlobByTree(tree, item, tail):
	entry = next((e for e in tree if e.name == item), None)
	if not entry:
		return Oid(hex=GIT_OID_HEX_ZERO)
	obj = repo[entry.id]
	if obj.type == GIT_OBJ_TREE:
		return getBlobByTree(obj, tail[0], tail[1:])
	assert obj.type == GIT_OBJ_BLOB
	return obj.id

def getBlob(tree, path):
	parts = path.split(os.sep)
	return getBlobByTree(tree, parts[0], parts[1:])

class Revision:
	def __init__(self, commit):
		self.commit = commit
		self.id = commit.id
		self.parent_ids = commit.parent_ids
		self.file_id = getBlob(commit.tree, path)

commits = dict()
todo = {repo.head.peel()}

while todo:
	commit = todo.pop()
	if commit.id in commits:
		continue
	commits[commit.id] = Revision(commit)
	todo.update(commit.parents)

for c in commits.values():
	print(str(c.id)[:7], [str(i)[:7] for i in c.parent_ids], str(c.file_id)[:7])
