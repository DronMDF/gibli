#!/usr/bin/env python3

import argparse
import os
from pygit2 import discover_repository, Oid, Repository, GIT_OBJ_TREE, GIT_OBJ_BLOB, GIT_OID_HEX_ZERO
from gi.repository import Gtk

parser = argparse.ArgumentParser(description='GIT blame interface')
parser.add_argument('filename', type=str, nargs='?', help='filename to analisys')
args = parser.parse_args()

cwd = os.getcwd()
repo_path = discover_repository(cwd)
repo = Repository(repo_path)

path = os.path.relpath(args.filename, repo.workdir)

def getBlobByTree(tree, item, tail):
	entry = next((e for e in tree if e.name == item), None)
	if not entry:
		return Oid(hex=GIT_OID_HEX_ZERO)
	obj = repo[entry.id]
	if obj.type == GIT_OBJ_TREE:
		return getBlobByTree(obj, tail[0], tail[1:])
	assert obj.type == GIT_OBJ_BLOB
	return obj.id

def getBlob(tree, path):
	parts = path.split(os.sep)
	return getBlobByTree(tree, parts[0], parts[1:])

class Revision:
	def __init__(self, commit):
		self.commit = commit
		self.id = commit.id
		self.parent_ids = set(commit.parent_ids)
		self.child_ids = set()
		self.file_id = getBlob(commit.tree, path)

	def addChild(self, id):
		self.child_ids.add(id)

	def label(self):
		return '%s:%s' % (str(self.id)[:7], str(self.file_id)[:7])


commits = dict()
todo = {repo.head.peel()}

while todo:
	commit = todo.pop()
	if commit.id in commits:
		continue
	revision = Revision(commit)
	if revision.file_id == Oid(hex=GIT_OID_HEX_ZERO):
		revision.parent_ids.clear()
	else:
		todo.update(commit.parents)
	commits[commit.id] = revision

# Accumulate childs
for c in commits.values():
	for p in c.parent_ids:
		commits[p].addChild(c.id)

def dropIdenticalChains():
	to_drop = set()
	for c in commits.values():
		if not c.parent_ids or not c.child_ids:
			continue
		parents = [commits[pp] for pp in c.parent_ids]
		if any((pp.file_id != c.file_id for pp in parents)):
			continue
		childs = [commits[cc] for cc in c.child_ids]
		if any((cc.file_id != c.file_id for cc in childs)):
			continue
		# unlink current and link childs and parent
		for cc in childs:
			cc.parent_ids.remove(c.id)
			cc.parent_ids.update(c.parent_ids)
		for pp in parents:
			pp.child_ids.remove(c.id)
			pp.child_ids.update(c.child_ids)
		# Cleanup current
		c.parent_ids.clear()
		c.child_ids.clear()
		to_drop.add(c.id)
	for cid in to_drop:
		del commits[cid]
	return bool(to_drop)


while dropIdenticalChains():
	pass


def cutNonPresent():
	root = next((c for c in commits.values() if not c.parent_ids), None)
	if root is None or root.file_id != Oid(hex=GIT_OID_HEX_ZERO):
		return False
	if not root.child_ids:	# HEAD revision
		return False
	for p in root.child_ids:
		parent = commits[p]
		parent.parent_ids.remove(root.id)
	del commits[root.id]
	return True


while cutNonPresent():
	pass


#print('digraph {')

#for c in commits.values():
#	print('\t"%s" [label="%s"];' % (str(c.id)[:7], c.label()))
#	for p in c.parent_ids:
#		print('\t"%s" -> "%s";' % (str(p)[:7], str(c.id)[:7]))
	#print(str(c.id)[:7], [str(i)[:7] for i in c.parent_ids], str(c.file_id)[:7])

#print('}')


class MainWindow(Gtk.Window):
	def __init__(self):
		super().__init__(title=path + ' - Gibli')
		self.maximize()

		self.vbox = Gtk.Box(orientation=Gtk.Orientation.VERTICAL, spacing=5)
		self.add(self.vbox)

		self.textview = Get.TextView()
		self.vbox.pack_start(self.textview, True, True, 0)

builder = Gtk.Builder()
main_window = None
textview1 = None
textview2 = None
giaphview = None

def main():
	builder.add_from_file('gibli.glade')

	main_window = builder.get_object('mainwindow')
	main_window.connect('delete-event', Gtk.main_quit)
	main_window.show_all()
	main_window.maximize()


if __name__ == '__main__':
	main()

	head = repo.head.peel()
	blob_id = getBlob(head.tree, path)
	blob_text = repo[blob_id].data

	textview2 = builder.get_object('textview2')
	textview2.get_buffer().set_text(blob_text.decode('utf8'))

	Gtk.main()
