#!/usr/bin/env python3

import os
import sys
import types
import unittest

with open('gibli') as f:
	gibli_code = compile(f.read(), 'gibli', 'exec')
gibli = types.ModuleType('gibli')
exec(gibli_code, gibli.__dict__)


class FakeApplication:
	def set_status_text(self, text): pass
	def set_status_progress(self, progress): pass
	def hide_status(self): pass
	def redraw_revision_graph(self): pass


class FakeCommit:
	def __init__(self, id, parent_ids):
		self.id = id
		self.parent_ids = parent_ids
		self.tree = []


class FakeRepo:
	def __init__(self, tree, head):
		self.tree = tree
		class Head: pass
		self.head = Head()
		self.head.peel = lambda: FakeCommit(head, self)
		self.head.target = head

	def walk(self, id, type):
		assert self.tree[0][0] == id
		return (FakeCommit(i, ps) for i, ps in self.tree)


class RepositoryUT(gibli.Repository):
	def __init__(self, tree, head):
		self.repo = FakeRepo(tree, head)
		self.commits = dict()

	def get_graph(self):
		return self.commits


class TestReposirity(unittest.TestCase):
	def testReposytoryChainOfCommits(self):
		# Given
		tree = [('A', ['B']), ('B', [])]
		repo = RepositoryUT(tree, 'A')
		# When
		for _ in repo.load(FakeApplication(), ''): pass
		# Then
		graph = repo.get_graph()
		self.assertEqual(graph['A'].deep, 0)
		self.assertEqual(graph['A'].branch, 0)
		self.assertEqual(graph['B'].deep, 1)
		self.assertEqual(graph['B'].branch, 0)


if __name__ == '__main__':
	unittest.main()
