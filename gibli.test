#!/usr/bin/env python3

import os
import pygit2
import sys
import types
import unittest

with open('gibli') as f:
	gibli_code = compile(f.read(), 'gibli', 'exec')
gibli = types.ModuleType('gibli')
exec(gibli_code, gibli.__dict__)


class FakeApplication:
	def set_status_text(self, text): pass
	def set_status_progress(self, progress): pass
	def hide_status(self): pass
	def redraw_revision_graph(self): pass


class FakeCommit:
	def __init__(self, commit):
		if isinstance(commit, tuple):
			self.id = commit[0]
			self.parent_ids = commit[1]
		else:
			self.id = commit
			self.parent_ids = []
		self.tree = []


class FakeRepo:
	def __init__(self, tree, head):
		self.tree = tree
		class Head: pass
		self.head = Head()
		self.head.peel = lambda: FakeCommit(head, self)
		self.head.target = head

	def walk(self, id, type):
		return (FakeCommit(r) for r in self.tree)


class RepositoryUT(gibli.Repository):
	def __init__(self, tree, head):
		self.repo = FakeRepo(tree, head)
		self.head_id = tree[0][0]	# first commit is tuple
		self.commits = dict()

	def get_graph(self):
		return self.commits


class TestReposirity(unittest.TestCase):
	@unittest.skip("Repository test is inconsistent")
	def testReposytoryChainOfCommits(self):
		# Given
		tree = [('A', ['B']), 'B']
		repo = RepositoryUT(tree, 'A')
		# When
		for _ in repo.load(FakeApplication(), ''): pass
		# Then
		graph = repo.get_graph()
		self.assertEqual(graph['A'].deep, 0)
		self.assertEqual(graph['A'].branch, 0)
		self.assertEqual(graph['B'].deep, 1)
		self.assertEqual(graph['B'].branch, 0)

	@unittest.skip("Repository test is inconsistent")
	def testReposytoryOverlap(self):
		# Given
		tree = [('A', ['D', 'B']), ('B', ['C']), 'C', ('D', ['E', 'F']), 'F', 'E']
		repo = RepositoryUT(tree, 'A')
		# When
		for _ in repo.load(FakeApplication(), ''): pass
		# Then
		graph = repo.get_graph()
		self.assertEqual(graph['E'].branch, 0)
		self.assertEqual(graph['C'].branch, 1)
		self.assertEqual(graph['F'].branch, 2)


class TestDiffLine:
	def __init__(self, origin):
		self.origin = origin


class TestDiffHunk(pygit2.DiffHunk):
	def __init__(self, lines, old_start=1, new_start=1):
		self.old_start = old_start
		self.old_lines = len(lines.replace('+', ''))
		self.new_start = new_start
		self.new_lines = len(lines.replace('-', ''))
		self.lines = [TestDiffLine(l) for l in lines]


class TestContentDiff(unittest.TestCase):
	def testEmptyDiff(self):
		# given
		diff = gibli.ContentDiff([])
		# then
		self.assertListEqual(diff.get_left_diff(), [])
		self.assertListEqual(diff.get_right_diff(), [])

	def testOneSideDiff(self):
		# given
		gdiff = [TestDiffHunk(lines='+'*100)]
		diff = gibli.ContentDiff(gdiff)
		# then
		self.assertListEqual(diff.get_left_diff(), [(1, 0, 100)])
		self.assertListEqual(diff.get_right_diff(), [(1, 100, 100)])


if __name__ == '__main__':
	unittest.main()
